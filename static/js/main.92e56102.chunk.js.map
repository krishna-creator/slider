{"version":3,"sources":["data.js","App.js","reportWebVitals.js","index.js"],"names":["person","id","image","name","quote","App","useState","data","index","setIndex","useEffect","length","s","setTimeout","clearInterval","className","map","people","ind","position","src","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MA0BeA,G,MA1BF,CACT,CACIC,GAAG,EACHC,MAAM,oBACNC,KAAK,WACLC,MAAM,kFAEV,CACIH,GAAG,EACHC,MAAM,oBACNC,KAAK,kBACLC,MAAM,kFAEV,CACIH,GAAG,EACHC,MAAM,oBACNC,KAAK,OACLC,MAAM,kFAEV,CACIH,GAAG,EACHC,MAAM,oBACNC,KAAK,OACLC,MAAM,oF,OCmCCC,MArDf,WAAgB,IAAD,EACUC,mBAASC,GADnB,mBACNP,EADM,aAEUM,mBAAS,IAFnB,mBAENE,EAFM,KAEAC,EAFA,KAqBX,OAlBFC,qBAAU,WACHF,EAAM,GACPC,EAAST,EAAOW,OAAO,GAEtBH,EAAMR,EAAOW,OAAO,GACrBF,EAAS,KAEX,CAACD,IACHE,qBAAU,WACR,IAAIE,EAAEC,YACJ,WACEJ,EAASD,EAAM,KACb,KAEJ,OAAO,WACLM,cAAcF,OAIpB,qCACA,oBAAIG,UAAU,wBAAd,oBACA,sBAAKA,UAAU,kCAAf,UACGf,EAAOgB,KAAI,SAACC,EAAOC,GAClB,IAAIC,EAAS,YACVX,IAAQU,IACTC,EAAS,gBAERD,IAAMV,EAAM,GAAc,IAARA,GAAaU,IAAMlB,EAAOW,OAAO,KACpDQ,EAAS,aANa,IAQjBlB,EAAqBgB,EAArBhB,GAAGC,EAAkBe,EAAlBf,MAAMC,EAAYc,EAAZd,KAAKC,EAAOa,EAAPb,MACrB,OACE,0BAASW,UAAWI,EAApB,UACE,6BAAKhB,IACL,qBAAKY,UAAU,aAAaK,IAAKlB,IACjC,6BAAI,4BAAIE,QAHyBH,MAOvC,wBAAQc,UAAU,OAAOM,QAAS,kBAAMZ,EAASD,EAAQ,IAAzD,SACI,cAAC,IAAD,MAEF,wBAAQO,UAAU,OAAOM,QAAS,kBAAMZ,EAASD,EAAQ,IAAzD,SACE,cAAC,IAAD,aCvCKc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.92e56102.chunk.js","sourcesContent":["const person=[\r\n    {\r\n        id:1,\r\n        image:\"./images/img1.jpg\",\r\n        name:\"Iron Man\",\r\n        quote:\"Is it better to be feared or respected? I say, is it too much to ask for both?\",\r\n    },\r\n    {\r\n        id:2,\r\n        image:\"./images/img1.jpg\",\r\n        name:\"Captain America\",\r\n        quote:\"Is it better to be feared or respected? I say, is it too much to ask for both?\",\r\n    },\r\n    {\r\n        id:3,\r\n        image:\"./images/img1.jpg\",\r\n        name:\"Thor\",\r\n        quote:\"Is it better to be feared or respected? I say, is it too much to ask for both?\",\r\n    },\r\n    {\r\n        id:4,\r\n        image:\"./images/img1.jpg\",\r\n        name:\"Hulk\",\r\n        quote:\"Is it better to be feared or respected? I say, is it too much to ask for both?\",\r\n    }\r\n];\r\nexport default person;","import './App.css';\nimport data from './data';\nimport React,{useState,useEffect} from 'react';\nimport { FiChevronRight, FiChevronLeft } from 'react-icons/fi';\n\nfunction App() {\n  const [person,setData]=useState(data);\n  const [index,setIndex]=useState(0);\n  useEffect(()=>{\n      if(index<0){\n        setIndex(person.length-1);\n      }\n      if(index>person.length-1){\n        setIndex(0);\n      }\n    },[index]);\n    useEffect(()=>{\n      var s=setTimeout(\n        ()=>{\n          setIndex(index+1);\n          },3000\n        );\n        return ()=>{\n          clearInterval(s);\n        }\n    })\n    return (\n    <>\n    <h1 className=\"jumbotron text-center\">Slider</h1>\n    <div className=\"container d-flex section-center\">\n      {person.map((people,ind)=>{\n        let position=\"nextSlide\";\n        if(index===ind){\n          position=\"activeSlide\";\n        }\n        if(ind===index-1 || (index===0 && ind===person.length-1)){\n          position=\"lastSlide\";\n        }\n        const {id,image,name,quote}=people;\n        return(\n          <article className={position} key={id}>\n            <h1>{name}</h1>\n            <img className=\"person-img\" src={image}></img>\n            <h4><q>{quote}</q></h4>\n          </article>\n        )\n      })}\n      <button className=\"prev\" onClick={() => setIndex(index - 1)}>\n          <FiChevronLeft />\n        </button>\n        <button className=\"next\" onClick={() => setIndex(index + 1)}>\n          <FiChevronRight />\n        </button>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}